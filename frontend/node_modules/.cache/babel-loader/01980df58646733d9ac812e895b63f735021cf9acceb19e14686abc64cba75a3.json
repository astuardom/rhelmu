{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\astuardo\\\\Downloads\\\\project\\\\src\\\\components\\\\ControlChecklist.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monthNames = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\nconst ControlChecklist = ({\n  controles = [],\n  patientId,\n  onControlesUpdated\n}) => {\n  _s();\n  const [localControles, setLocalControles] = useState([]);\n  const currentYear = new Date().getFullYear();\n  useEffect(() => {\n    const existingYear = controles.find(c => c.year === currentYear);\n    if (!existingYear) {\n      const newControles = [...controles, {\n        year: currentYear,\n        months: monthNames.map(m => ({\n          month: m,\n          attended: false\n        }))\n      }];\n      setLocalControles(newControles);\n      handleSaveToServer(newControles);\n    } else {\n      setLocalControles(controles);\n    }\n  }, [controles]);\n  const handleSaveToServer = async updatedControles => {\n    try {\n      const res = await fetch(`http://localhost:5000/api/pacientes/${patientId}/controles`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          controles: updatedControles\n        })\n      });\n      if (!res.ok) throw new Error('Error actualizando');\n      const updated = await res.json();\n      onControlesUpdated(updated.controles);\n    } catch (err) {\n      console.error('❌ Error actualizando controles:', err);\n    }\n  };\n  const toggleCheck = (year, monthName) => {\n    const updated = localControles.map(control => {\n      if (control.year === year) {\n        return {\n          ...control,\n          months: control.months.map(m => m.month === monthName ? {\n            ...m,\n            attended: !m.attended\n          } : m)\n        };\n      }\n      return control;\n    });\n    setLocalControles(updated);\n    handleSaveToServer(updated);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white p-4 rounded-lg shadow\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-lg font-semibold mb-4\",\n      children: \"Historial de Controles\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), localControles.filter(control => control.year === currentYear).map(control => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"text-md font-semibold mb-2\",\n        children: [\"A\\xF1o \", control.year]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-2 md:grid-cols-4 gap-4\",\n        children: control.months.map(month => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center space-x-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm w-20\",\n            children: month.month\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => toggleCheck(control.year, month.month),\n            className: `px-2 py-1 rounded text-xs ${month.attended ? 'bg-green-500 text-white' : 'bg-red-500 text-white'}`,\n            children: month.attended ? 'Asistió' : 'No asistió'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 19\n          }, this)]\n        }, month.month, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this)]\n    }, control.year, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(ControlChecklist, \"QPUV60IMnLt6doYECa0rDb/YS5U=\");\n_c = ControlChecklist;\nexport default ControlChecklist;\nvar _c;\n$RefreshReg$(_c, \"ControlChecklist\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","monthNames","ControlChecklist","controles","patientId","onControlesUpdated","_s","localControles","setLocalControles","currentYear","Date","getFullYear","existingYear","find","c","year","newControles","months","map","m","month","attended","handleSaveToServer","updatedControles","res","fetch","method","headers","body","JSON","stringify","ok","Error","updated","json","err","console","error","toggleCheck","monthName","control","className","children","fileName","_jsxFileName","lineNumber","columnNumber","filter","onClick","_c","$RefreshReg$"],"sources":["C:/Users/astuardo/Downloads/project/src/components/ControlChecklist.js"],"sourcesContent":["\nimport React, { useState, useEffect } from 'react';\n\nconst monthNames = [\n  'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',\n  'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'\n];\n\nconst ControlChecklist = ({ controles = [], patientId, onControlesUpdated }) => {\n  const [localControles, setLocalControles] = useState([]);\n  const currentYear = new Date().getFullYear();\n\n  useEffect(() => {\n    const existingYear = controles.find(c => c.year === currentYear);\n    if (!existingYear) {\n      const newControles = [\n        ...controles,\n        {\n          year: currentYear,\n          months: monthNames.map(m => ({ month: m, attended: false }))\n        }\n      ];\n      setLocalControles(newControles);\n      handleSaveToServer(newControles);\n    } else {\n      setLocalControles(controles);\n    }\n  }, [controles]);\n\n  const handleSaveToServer = async (updatedControles) => {\n    try {\n      const res = await fetch(`http://localhost:5000/api/pacientes/${patientId}/controles`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ controles: updatedControles })\n      });\n      if (!res.ok) throw new Error('Error actualizando');\n      const updated = await res.json();\n      onControlesUpdated(updated.controles);\n    } catch (err) {\n      console.error('❌ Error actualizando controles:', err);\n    }\n  };\n\n  const toggleCheck = (year, monthName) => {\n    const updated = localControles.map(control => {\n      if (control.year === year) {\n        return {\n          ...control,\n          months: control.months.map(m => m.month === monthName ? { ...m, attended: !m.attended } : m)\n        };\n      }\n      return control;\n    });\n    setLocalControles(updated);\n    handleSaveToServer(updated);\n  };\n\n  return (\n    <div className=\"bg-white p-4 rounded-lg shadow\">\n      <h3 className=\"text-lg font-semibold mb-4\">Historial de Controles</h3>\n      {localControles\n        .filter(control => control.year === currentYear)\n        .map(control => (\n          <div key={control.year} className=\"mb-6\">\n            <h4 className=\"text-md font-semibold mb-2\">Año {control.year}</h4>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              {control.months.map(month => (\n                <div key={month.month} className=\"flex items-center space-x-2\">\n                  <span className=\"text-sm w-20\">{month.month}</span>\n                  <button\n                    onClick={() => toggleCheck(control.year, month.month)}\n                    className={`px-2 py-1 rounded text-xs ${month.attended ? 'bg-green-500 text-white' : 'bg-red-500 text-white'}`}\n                  >\n                    {month.attended ? 'Asistió' : 'No asistió'}\n                  </button>\n                </div>\n              ))}\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default ControlChecklist;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}